@import "colors.less";

.comment {
    color: @comment;
    background: @comment-bg;
}

.keyword {
    // @ of @font-face & @media
    color: @keyword;

    // try, catch, if, else, return (js)
    &.control {
        color: @variable;
    }

    // =, +, -, ?, :, !=. &&, in (js)
    &.operator {
        color: @white;
    }

    // Unspecified. Not sure what this does.
    &.other.special-method {
        color: @keyword;
    }

    // Same here.
    &.other.unit {
        color: @keyword;
    }
}

.storage {
    color: @storage;

    // var of var a = b;
    &.modifier {
        color: @storage;
    }
}

.constant {
    // true, false, null, undefined
    color: @constant;

    // \ of ("what\'s")
    &.character.escape {
        color: @constant;
    }

    // Numbers.
    &.numeric {
        color: @numeric;
    }

    // Unknown.
    &.other.color {
        color: @constant;
    }

    // Unknown.
    &.other.symbol {
        color: @constant;
    }
}

.variable {
    // this (js), @varable_name (sass), http://web.com of url(http://web.com), variable of {{variable}} (handlebars)
    color: @variable;

    // Unknown.
    &.interpolation {
        color: @white;
    }

    // foo & bar of function name(foo, bar)
    &.parameter.function {
        color: @function-param;
    }

    &.other {
        color: @white;

        &.property {
            color: @variable;
        }
    }
}

.invalid.deprecated,
.invalid.illegal {
    background: none;
    color: @error;
}

.string {
    // 'value' of var='value', "name.png" or src="name.png"  , etc
    color: @string;

    // REGEX - [\da-z] of /-([\da-z])/gi (js)
    .constant {
        color: @regex;
    }

    &.regexp {
        // ?:input, select, textarea, button of  /^(?:input|select|textarea|button)$/i,
        color: @regex;

        .constant.character.escape,
        .source.ruby.embedded,
        .string.regexp.arbitrary-repitition {
            color: @regex;
        }

        &.group {
            color: @regex;
        }

        &.character-class {
            color: @regex;
        }

        .source.ruby.embedded {
            color: @regex;
        }
    }

    // site.dir in {{site.dir}}
    .variable {
        color: @variable;
    }

    // Unknown.
    &.other.link {
        color: @string;
    }
}

// String interpolation in Ruby, CoffeeScript, and others
.source .string {
    .meta.embedded.line,
    .source {
        color: @string;
    }

    .punctuation.section.embedded {
        color: @string;

        .source {
            color: @string; // Required for the end of embedded strings in Ruby # 716
        }
    }
}

.punctuation {
    &.terminator {
        color: @punctuation;
    }

    &.separator {
        color: @punctuation;
    }

    &.definition {
        color: @punctuation;

        &.comment {
            color: @comment-punc;
        }

        &.array {
            color: @punctuation;
        }

        &.string,
        &.variable {
            color: @string;
        }

        &.parameters {
            color: @code-font-color;
        }

        &.heading,
        &.identity {
            color: @code-font-color;
        }

        &.bold {
            color: @code-font-color;
            font-weight: bold;
        }

        &.italic {
            color: @code-font-color;
            font-style: italic;
        }
    }

    &.section {
        &.array, &.function {
            color: @punctuation;
        }

        &.embedded {
            color: @code-font-color;
        }
    }
}

.support {
    // background of background: none,
    color: @support;

    // module of module.exports
    &.class {
        color: @support;
    }

    &.function {
        color: @keyword; // .log of console.log, url of url(http://web.com)

        // Unknown.
        &.any-method {
            color: @support;
        }
    }

    // {{}} of {{ variable }}
    &.constant {
        // none of text-decoration: none;
        color: @constant;
    }

    &.type.property-name {
        color: @variable;
    }
}

// .class names in css & scss
.meta.tag.inline,
.meta.tag.inline .entity,
.source .entity.name.tag {
    color: @class;
}

&.tag,
&.tag .entity {
    color: @tag-entity;
}

.html {
    .string {
        color: @code-font-color;
    }

    .punctuation.definition.tag {
        color: @tag;
    }

    .entity {
        &.name.tag {
            text-decoration: done;

            // structural elements - <html>
            &.structure {
                color: @tag;
            }

            // block level elements - <div>, <h1>
            &.block {
                color: @tag;
            }

            // inline elements - <span>
            &.script {
                // color: @tag;
            }
        }

        &.other {
            &.attribute-name {
                color: @element-attr;
            }
        }
    }
}

// exports of module.exports, <div id= of <div id="#id">, . of .className
.entity {
    // console of console.log (js)
    &.name.type {
        color: @entity;
        text-decoration: none;
    }

    &.other.inherited-class {
        color: @entity;
    }

    &.name.class,
    &.name.type.class {
        color: @support;
    }

    &.name.section {
        color: @entity;
    }

    // div of <div> (html), body of body{} (css)
    &.name.tag {
        color: @tag;
        text-decoration: done;
    }

    // CSS class names.
    &.other.attribute-name {
        color: @entity;

        // ID names.
        &.id {
            color: @id;
        }
    }

    &.gfm {
        color: @blue;
    }
}

.meta {
    &.link {
        color: @meta;
    }

    &.require {
        color: @meta;
    }

    &.brace {
        // Curly braces - {}
        &.curly {
            color: @brackets;
        }

        // Parenthesis - ()
        &.round {
            color: @code-font-color;
        }
    }

    &.comma {
        color: @punctuation;
    }

    // .css files | commas, ([controls]) of audio:not([controls])
    &.selector {
        color: @punctuation;
    }

    &.separator {
        background-color: @punctuation;
        color: @punctuation;
    }

    &.function {
        color: @function !important;
    }

    &.function-call {
        color: @entity !important;
    }

    &.method-call {
        color: @keyword !important;
    }

    &.arguments {
        color: @variable;
    }
}

.none {
    color: @code-font-color;
}

.markup {
    &.link {
        color: @comment;
    }

    &.bold {
        color: @markup;
        font-weight: bold;
    }

    &.changed {
        color: @markup;
    }

    &.deleted {
        color: @markup;
    }

    &.italic {
        color: @pink;
        font-style: italic;
    }

    &.heading .punctuation.definition.heading {
        color: @markup;
    }

    &.inserted {
        color: @markup;
    }

    &.list {
        color: @markup;
    }

    &.quote {
        color: @markup;
    }

    &.raw {
        color: @red;
    }

    &.raw.inline {
        color: @markup;
    }
}

.source.gfm .markup {
    -webkit-font-smoothing: auto;

    &.heading {
        color: @special;

        &.marker {
            color: @comment;
        }
    }
}

:host(.mini),
atom-text-editor[mini] {
    .scroll-view {
        padding-left: 1px;
    }
}
